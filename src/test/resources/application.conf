# Copyright 2016 Dennis Vriend
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

akka {
  stdout-loglevel = off // defaults to WARNING can be disabled with off. The stdout-loglevel is only in effect during system startup and shutdown
  log-dead-letters-during-shutdown = on
  loglevel = debug
  log-dead-letters = on
  log-config-on-start = off // Log the complete configuration at INFO level when the actor system is started

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  extensions = ["com.github.dnvriend.stream.activemq.extension.ActiveMqExtension"]

  actor {
    debug {
      receive = off // log all messages sent to an actor if that actors receive method is a LoggingReceive
      autoreceive = off // log all special messages like Kill, PoisoffPill etc sent to all actors
      lifecycle = off // log all actor lifecycle events of all actors
      fsm = off // enable logging of all events, transitioffs and timers of FSM Actors that extend LoggingFSM
      event-stream = off // enable logging of subscriptions (subscribe/unsubscribe) on the ActorSystem.eventStream
    }
  }

  persistence {
    journal {
      plugin = "jdbc-journal"
      auto-start-journals = ["jdbc-journal"]
    }
    snapshot-store {
      plugin = "jdbc-snapshot-store"
      auto-start-snapshot-stores = ["jdbc-snapshot-store"]
    }
  }
}

reactive-activemq {
  connections = ["amq"]
}

amq {
  host = "boot2docker"
  port = "61616"
  user = "amq"
  pass = "amq"
}

PersonConsumer {
  conn = "amq"
  queue = "Person"
  concurrentConsumers = "1"
}

PersonProducer {
  conn = "amq"
  topic = "Person"
}

PersonCopyProducer {
  conn = "amq"
  topic = "PersonCopy"
}

AckBidiFlowTestInput {
  conn = "amq"
  topic = "AckBidiFlowInput"
  queue = "AckBidiFlowInput"
  concurrentConsumers = "1"
}

AckBidiFlowTestOutput {
  conn = "amq"
  topic = "AckBidiFlowOutput"
  queue = "AckBidiFlowOutput"
  concurrentConsumers = "1"
}

AckBidiFlowReqRespTestInput {
  conn = "amq"
  topic = "AckBidiFlowReqRespTestInput"
  queue = "AckBidiFlowReqRespTestInput"
  reply-to = "VirtualTopic.AckBidiFlowReqRespTestOutput"
  concurrentConsumers = "1"
}

AckBidiFlowReqRespTestOutput {
  conn = "amq"
  queue = "AckBidiFlowReqRespTestOutput"
  concurrentConsumers = "1"
}

slick {
  driver = "slick.driver.PostgresDriver$"
  db {
    url = "jdbc:postgresql://boot2docker:5432/docker"
    user = "docker"
    password = "docker"
    driver = "org.postgresql.Driver"
    connectionTestQuery = "SELECT 1"
    numThreads = 4
    maxConnections = 4
    minConnections = 1
  }
}

jdbc-journal {
  slick = ${?slick}
  slick.db.numThreads = 4
  slick.db.maxConnections = 4
  slick.db.minConnections = 1
}

jdbc-snapshot-store {
  slick = ${?slick}
  slick.db.numThreads = 4
  slick.db.maxConnections = 4
  slick.db.minConnections = 1
}

jdbc-read-journal {
  refresh-interval = "1s"
  max-buffer-size = "500"

  slick = ${?slick}
  slick.db.numThreads = 4
  slick.db.maxConnections = 4
  slick.db.minConnections = 1
}