@import Main._
@object Lnk {
  val reactiveActiveMq = lnk("reactive-activemq", "https://github.com/dnvriend/reactive-activemq")
  val amq = lnk("ActiveMq", "http://activemq.apache.org/")
  val akkaStreams = lnk("akka-streams", "http://doc.akka.io/docs/akka/current/scala/stream/index.html")
  val demand = lnk("demand-stream", "http://doc.akka.io/docs/akka/current/scala/stream/stream-flows-and-basics.html#Back-pressure_explained")
  val backPressure = lnk("backPressure", "http://doc.akka.io/docs/akka/current/scala/stream/stream-flows-and-basics.html#Back-pressure_explained")
  val akkaPers = lnk("akka-persistence", "http://doc.akka.io/docs/akka/current/scala/persistence.html")
  val akkaPersQ = lnk("akka-persisistence-query", "http://doc.akka.io/docs/akka/current/scala/persistence-query.html")
  val virtualTopic = lnk("VirtualTopic", "http://activemq.apache.org/virtual-destinations.html")
  val typesafeConfig = lnk("Typesafe Config", "https://github.com/typesafehub/config")
  val matValues = lnk("Materialized Values", "http://doc.akka.io/docs/akka/current/scala/stream/stream-composition.html#materialized-values")
  val lineairFlows = lnk("Lineair Flows", "http://doc.akka.io/docs/akka/current/scala/stream/stream-flows-and-basics.html#Defining_and_running_streams")
}

@import Lnk._
@sect{Reactive-ActiveMQ v0.0.22}
    @p
        @reactiveActiveMq is an @akkaStreams compatible connector for @amq providing two components, the @sect.ref{ActiveMqConsumer} and @sect.ref{ActiveMqProducer} that can consume and produce messages with @virtualTopic semantics, using @akkaStreams's @demand feature to control the message flow between components.

    @sect{Getting Started}
        @p
            Foobar

@sect{Components}
    @p
    The components are designed around the following choices:
        @ul
            @li{Each queue will contain only one message type, we will call this type `T`}
            @li{@sect.ref{ActiveMqConsumer}s will receive messages}
            @li{@sect.ref{ActiveMqProducer}s will send messages}
        @sect{ActiveMqConsumer}
            @p
                @ul
                    @li{Consumers will consume messages from a queue using @virtualTopic semantics for example @b{activemq:queue:Consumer.ConsumerName.VirtualTopic.TopicName?concurrentConsumers=1}}
                    @li{Consumers need a @b{MessageExtractor} typeclass to extract messages to type `T`}
                    @li{Consumers have names that refer to a configuration using @typesafeConfig}
                    @li{Consumers will be implemented using @akkaStreams and are an @b{ActiveMqConsumer("consumerName")} and need an implicit @b{MessageExtractor} to consume/receive messages}
        @sect{ActiveMqProducer}
            @p
                @ul
                    @li{Producers will produce to a topic using @virtualTopic semantics for example @b{activemq:topic:VirtualTopic.TopicName}}
                    @li{Producers need a @b{MessageBuilder} typeclass to create messages to send to a topic}
                    @li{Producers have names that refer to a configuration using @typesafeConfig}
                    @li{Producers will be implemented using @akkaStreams and are an @b{ActiveMqProducer("consumerName")} and need an implicit @b{MessageBuilder} to produce/send messages}
